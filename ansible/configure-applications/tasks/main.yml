---
# tasks file for gschaetz.provision-desktop
- include_vars:
    file: "{{ application_setup }}"
    name: apps

# delete desktop entries
- name: Delete all desktop files 
  shell: "rm -rf {{ local_home }}/Desktop/*.desktop"

# # remove custom menu items
- name: Delete all desktop files 
  shell: "rm -rf /usr/share/applications/*-myapps.desktop"
  become: true

# remove main directory
- name: Remove main directory
  file: path={{ desktop_dir }}/apps/ state=absent

# create main directory
- name: Creates main directory
  file: path={{ desktop_dir }}/apps/ state=directory

# create persistent directories for applications
- name: Creates persistent app directories
  file: path={{ desktop_dir }}/persistent/{{ item.key }} state=directory owner=root group=root mode=0777
  become: true
  with_dict: "{{ apps.applications }}"

# create resources directory
- name: Creates resource directory
  file: path={{ desktop_dir }}/resources state=directory

# remove fast links directory
- name: Remove links directory
  file: path=/usr/local/bin/myapps/ state=absent
  become: true

# create fast links directory
- name: Create links directory
  file: path=/usr/local/bin/myapps/ state=directory
  become: true

# create directories for applications
- name: Creates application directories
  file: path={{ desktop_dir }}/apps/{{ item.key }} state=directory
  with_dict: "{{ apps.applications }}"

# download app icons
- name: Download app icons
  get_url:
    url: "{{ item.value.desktop_icon_download_url }}"
    dest: "{{ desktop_dir }}/apps/{{ item.key }}/{{ item.value.desktop_icon }}"
    mode: 0440
  with_dict: "{{ apps.applications }}"

# download sec comps
- name: Download sec comps
  get_url:
    url: "{{ item.value.docker_sec_comp_download_url }}"
    dest: "{{ desktop_dir }}/apps/{{ item.key }}/{{ item.key }}.json"
    mode: 0440
  when: item.value.docker_sec_comp == true
  with_dict: "{{ apps.applications }}"

# create desktop icon 
- name: Create desktop icon
  template:
    src: "{{ project_home }}/templates/gnome-desktop-template.j2"
    dest: "{{ local_home }}/Desktop/{{ item.value.desktop_name }}.desktop"
    mode: 0777
  when: item.value.show_on_desktop == true 
  with_dict: "{{ apps.applications }}"

# # create menu item 
- name: Create menu item
  template:
    src: "{{ project_home }}/templates/gnome-desktop-template.j2"
    dest: "/usr/share/applications/{{ item.value.desktop_name }}-myapps.desktop"
    mode: 0777
  become: true
  with_dict: "{{ apps.applications }}"

# gio those apps
- name: gio the apps to remove untrusted
  shell: gio set {{ local_home }}/Desktop/{{ item.value.desktop_name }}.desktop "metadata::trusted" yes
  when: item.value.show_on_desktop == true 
  with_dict: "{{ apps.applications }}"

# add xhost + to ensure x can run 
- name: xhost +
  shell: xhost +

# create docker start files 
- name: create docker start file
  template:
    src: "{{ project_home }}/templates/app-start-docker.j2"
    dest: "{{ desktop_dir }}/apps/{{ item.key }}/{{ item.key }}"
    mode: 0777
  when: item.value.implementation_type == "docker" 
  with_dict: "{{ apps.applications }}"

# create docker_compose file
- name: create docker_compose file
  template:
    src: "{{ project_home }}/templates/app-dockercompose.j2"
    dest: "{{ desktop_dir }}/apps/{{ item.key }}/docker-compose.yml"
    mode: 0777
  when: item.value.implementation_type == "docker_compose" 
  with_dict: "{{ apps.applications }}"

# create docker_compose files 
- name: create docker_compose run file
  template:
    src: "{{ project_home }}/templates/app-start-dockercompose.j2"
    dest: "{{ desktop_dir }}/apps/{{ item.key }}/{{ item.key }}"
    mode: 0777
  when: item.value.implementation_type == "docker_compose" 
  with_dict: "{{ apps.applications }}"

# create link for command line runfile:
- name: create link for bin
  file: 
    src: "{{ desktop_dir }}/apps/{{ item.key }}/{{ item.key }}"
    dest: "/usr/local/bin/myapps/{{ item.key }}"
    state: link
  become: true
  with_dict: "{{ apps.applications }}"

# create a file in /etc/profile.d
- name: create file in path for env 
  copy: 
    content: "PATH=/usr/local/bin/myapps/:$PATH \n xhost +" 
    dest: "/etc/profile.d/custom-path.sh"
  become: true
